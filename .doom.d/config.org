#+title: Buraiyen's Doom Emacs Config
#+AUTHOR: Brian Nguyen (Buraiyen)
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t
#+STARTUP: showeverything

* TABLE OF CONTENTS :toc:
- [[#about-this-config--doom-emacs][ABOUT THIS CONFIG / DOOM EMACS]]
- [[#emacs-client--emacs-daemon][EMACS CLIENT / EMACS DAEMON]]
- [[#general-configs][GENERAL CONFIGS]]
  - [[#full-name--email][Full Name / Email]]
  - [[#general-keybindings][General Keybindings]]
  - [[#open-specific-files][Open Specific Files]]
  - [[#looks][Looks]]
- [[#beacon][BEACON]]
- [[#bookmarks-and-buffers][BOOKMARKS AND BUFFERS]]
  - [[#buffers][Buffers]]
- [[#calendar][CALENDAR]]
- [[#dashboard][DASHBOARD]]
- [[#dired][DIRED]]
  - [[#keybindings-to-open-dired][Keybindings to Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
  - [[#peep-dired-mode][Peep-Dired Mode]]
  - [[#making-deleted-files-go-to-the-trash-can][Making deleted files go to the trash can]]
- [[#emojis][EMOJIS]]
- [[#ide-like-development][IDE-LIKE DEVELOPMENT]]
  - [[#centaur-tabs][centaur-tabs]]
  - [[#company-mode][company-mode]]
  - [[#emmet-mode][emmet-mode]]
  - [[#hippie-expand][hippie-expand]]
  - [[#lsp-mode][lsp-mode]]
  - [[#neotree][neotree]]
- [[#org-mode][ORG MODE]]
  - [[#basic-setup][Basic Setup]]
  - [[#org-mode-ellipsis][org-mode Ellipsis]]
  - [[#org-roam][org-roam]]
  - [[#org-roam-ui][org-roam-ui]]
  - [[#org-auto-tangle][org-auto-tangle]]
  - [[#org-publish][org-publish]]
- [[#rainbow-mode][RAINBOW MODE]]

* ABOUT THIS CONFIG / DOOM EMACS
#+attr_org: :width 400
[[./splash/doomEmacsDoomOne.svg]]

Doom Emacs is a configuration framework for GNU Emacs. It uses the "evil"
keybindings set to emulate Vim keybindings. Doom Emacs has various different
packages and customization for you to choose.

The majority of these configurations are inspired by [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/doom/config.org][Distrotube's Doom Emacs configurations.]]

[[https://github.com/doomemacs/][Link to Doom Emacs GitHub project]]

* EMACS CLIENT / EMACS DAEMON
Doom Emacs is optimized for speed. The appropriate way to launch Doom Emacs is to set up an Emacs daemon

~/usr/bin/emacs --daemon~

Then to start emacsclient, you would run this command

~emacsclient -c -a 'emacs'~

This will launch emacs a lot quicker than if you were to do it just by using the
regular ~emacs~ command. The ~-a~ flag ensures that in case emacsclient fails to
launch, then Emacs would launch instead

* GENERAL CONFIGS
The configs in this section are not related to any third-pary packages

** Full Name / Email
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. If you don't use any of these services, then
you don't have to fill out these fields

#+begin_src emacs-lisp
(setq user-full-name "Brian Nguyen"
      user-mail-address "brian.edison.nguyen@gmail.com")
#+end_src

** General Keybindings
In default Vim, navigating up and down around a word wrap would just jump to the
first or last character. The bindings below makes it so that navigating though a
word wrap would go through each line

As always, if you want to separate text bodies into different lines, you could use ~gq~

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
#+end_src


** Open Specific Files
These are keybindings to open files that I commonly use

| PATH TO FILE                   | DESCRIPTION              | KEYBINDING |
|--------------------------------+--------------------------+------------|
| ~/.doom.d/config.org           | /Edit doom config.org/   | SPC = c  |
| ~/.doom.d/init.el              | /Edit doom init.el/      | SPC = i  |
| ~/.doom.d/packages.el          | /Edit doom packages.org/ | SPC = p  |
| ~/Documents/journal/agenda.org | /Edit agenda file/       | SPC = a  |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("=" . "open file")
       :desc "Edit doom config.org" "c" #'(lambda () (interactive) (find-file "~/.doom.d/config.org"))
       :desc "Edit doom init.el" "i" #'(lambda () (interactive) (find-file "~/.doom.d/init.el"))
       :desc "Edit doom packages.el" "p" #'(lambda () (interactive) (find-file "~/.doom.d/packages.el"))
       :desc "Edit agenda.org" "a" #'(lambda () (interactive) (find-file "~/Documents/notes/agenda.org"))
))
#+end_src

** Looks
*** Font
Doom exposes five (optional) variables for controlling fonts in Doom.

| Font Type                  | Description                                                  |
|----------------------------+--------------------------------------------------------------|
| `doom-font'                | Your standard font                                           |
| `doom-variable-pitch-font' | For some Emacs applications                                  |
| `doom-big-font'            | For `doom-big-font-mode' ~SPC t b~                             |
| `font-lock-comment-face'   | For comments                                                 |
| `font-lock-keyword-face'   | For keywords with special significance, like `setq` in elisp |


#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMonoMedium Nerd Font Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15))

#+end_src

*** Hiding Emphasis Markers
Emacs by default shows emphasis markers (e.g. / ... / for italics, * ... * for bold, etc).
The setting below hides the emphasis markers; note that they are still there even if hidden.
You would need to backspace into the emphasis marker if you want to change the text

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

*** Line Numbers
Line numbers are currently set to relative. Using ~'nil~ removes line numbers

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

*** Theme
Set the theme for Doom Emacs. The 'enable' commands seem to not work for me. Would need to find out why

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  :init
  (load-theme 'doom-one t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

#+end_src

*** Window Size
The setting below sets Emacs to open maximized without it being fully fullscreen

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

*** Window Transparency
The transparency is set to 90%. It looks great if you are using window blur with a compositor

#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions
        (lambda (frame)
            (select-frame frame)
            (set-frame-parameter (selected-frame) 'alpha '(90 90)))
   (set-frame-parameter (selected-frame) 'alpha '(90 90))))
#+end_src

* BEACON
Beacon is a very useful tool for locating your cursor. Whenever you scroll, a flashing light flashes horizontally on your cursor

#+begin_src emacs-lisp
(beacon-mode 1)
(setq beacon-blink-when-point-moves-vertically 1
      beacon-color "#F28AB3" ;; light pink color
      beacon-blink-when-buffer-changes t
      beacon-blink-when-window-scrolls t)
#+end_src


* BOOKMARKS AND BUFFERS
Doom Emacs uses ~SPC b~ for keybindings related to bookmarks and buffers

** Buffers
Emacs uses /buffers/ to hold the file's text. Multiple buffers can be running at
the same time, allowing you to conveniently switch between them

| COMMAND         | DESCRIPTION           | KEYBINDING |
|-----------------+-----------------------+------------|
| ibuffer         | Launch ibuffer        | SPC b i    |
| kill-buffer     | Kill current buffer   | SPC b k    |
| next-buffer     | Go to next buffer     | SPC b n    |
| previous-buffer | Go to previous buffer | SPC b p    |
| save-buffer     | Save current buffer   | SPC b s    |

*** ibuffer mode
#+attr_org: :width 500
[[./config-img/ibuffer.png]]

ibuffer mode is a user interface that lets you view and manage running buffers

| COMMAND                           | DESCRIPTION                            | KEYBINDING |
|-----------------------------------+----------------------------------------+------------|
| ibuffer-mark-forward              | Mark the buffer                        | m          |
| ibuffer-unmark-forward            | Unmark the buffer                      | u          |
| ibuffer-do-kill-on-deletion-marks | Kill the marked buffers                | x          |
| ibuffer-filter-by-content         | Ibuffer filter by content              | f c        |
| ibuffer-filter-by-directory       | Ibuffer filter by directory            | f d        |
| ibuffer-filter-by-filename        | Ibuffer filter by filename (full path) | f f        |
| ibuffer-filter-by-mode            | Ibuffer filter by mode                 | f m        |
| ibuffer-filter-by-name            | Ibuffer filter by name                 | f n        |
| ibuffer-filter-disable            | Disable ibuffer filter                 | f x        |
| ibuffer-do-kill-lines             | Hide marked buffers                    | g h        |
| ibuffer-update                    | Restore hidden buffers                 | g H        |

#+begin_src emacs-lisp
(evil-define-key 'normal ibuffer-mode-map
  (kbd "f c") 'ibuffer-filter-by-content
  (kbd "f d") 'ibuffer-filter-by-directory
  (kbd "f f") 'ibuffer-filter-by-filename
  (kbd "f m") 'ibuffer-filter-by-mode
  (kbd "f n") 'ibuffer-filter-by-name
  (kbd "f x") 'ibuffer-filter-disable
  (kbd "g h") 'ibuffer-do-kill-lines
  (kbd "g H") 'ibuffer-update)
#+end_src

* CALENDAR
Opens up a full graphical 12-month calendar with agendas and holidays listed.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") '=calendar)

(setq holiday-general-holidays nil
      holiday-christian-holidays nil
      holiday-hebrew-holidays nil
      holiday-islamic-holidays nil
      holiday-bahai-holidays nil
      holiday-oriental-holidays nil)
#+end_src

* DASHBOARD
A customizable startup screen when launching Emacs. Be sure to comment-out ~doom-dashboard~ in ~init.el~ so that this wouldn't break

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
(after! dashboard
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
   dashboard-banner-logo-title "\nKEYBINDINGS\
                                 \nFind file          (SPC .)\
                                 \nEdit Doom Config   (SPC = c)\
                                 \nEdit Doom Init     (SPC = i)\
                                 \nEdit Doom Packages (SPC = p)\
                                 \nEdit agenda        (SPC = a)"
   dashboard-startup-banner "~/.doom.d/splash/doomEmacsDoomOne.svg"
   dashboard-set-heading-icons t
   dashboard-set-file-icons t
   dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 5)
                          (projects . 5)
                          (registers . 5))))

#+end_src

* DIRED
dired (/directory editor/) is a built-in file explorer / manager for Emacs

** Keybindings to Open Dired

| COMMAND    | DESCRIPTION                          | KEYBINDING |
|------------+--------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired

*** Basic dired commands

| COMMAND                | DESCRIPTION                                 | KEYBINDING |
|------------------------+---------------------------------------------+------------|
| dired-view-file        | /View file in dired/                          | SPC d v    |
| dired-up-directory     | /Go up in directory tree/                     | h          |
| dired-find-file        | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line        | Move down to next line                      | j          |
| dired-previous-line    | Move up to previous line                    | k          |
| dired-mark             | Mark file at point                          | m          |
| dired-unmark           | Unmark file at point                        | u          |
| dired-do-copy          | Copy current file or marked files           | C          |
| dired-do-rename        | Rename or move current file or marked files | R          |
| dired-hide-details     | Toggle detailed listings on/off             | (          |
| dired-git-info-mode    | Toggle git information on/off               | )          |
| dired-create-directory | Create new empty directory                  | +          |
| dired-diff             | Compare file at point with another          | =          |
| dired-subtree-toggle   | Toggle viewing subtree at point             | TAB        |

*** Dired commands using regex

| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | Mark files using regex     | % m        |
| dired-do-copy-regexp    | Copy files using regex     | % C        |
| dired-do-rename-regexp  | Rename files using regex   | % R        |
| dired-mark-files-regexp | Mark all files using regex | * %        |


*** File permissions and ownership

| COMMAND         | DESCRIPTION                      | KEYBINDING |
|-----------------+----------------------------------+------------|
| dired-do-chgrp  | Change the group of marked files | g G        |
| dired-do-chmod  | Change the mode of marked files  | M          |
| dired-do-chown  | Change the owner of marked files | O          |
| dired-do-rename | Rename file or all marked files  | R          |


#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-find-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Peep-Dired Mode
peep-dired allows you to get image previews as you navigate through image files

Be sure that the package is installed in ~package.el~

#+begin_src emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src

** Making deleted files go to the trash can
While navigating dired, use the ~D~ key to move files to the trash bin

#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")
#+end_src

=NOTE=: For convenience, you may want to create a symlink to 'local/share/Trash' in your home directory:

#+begin_example
cd ~/
ln -s ~/.local/share/Trash .
#+end_example

* EMOJIS
Emojify displays emojis. It can display GitHub / Discord style (~:name-of-emoji:~)
like :smile: or plain ascii ones like :)

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

* IDE-LIKE DEVELOPMENT
** centaur-tabs
centaur-tabs is part of the modern IDE look where different buffers are separated into tabs at the top of the screen

#+begin_src emacs-lisp
;; needed to work in emacsclient
(require 'centaur-tabs)
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
#+end_src

** company-mode
company-mode is a text-completion framework. I set it up so that there is no time delay
for the suggestions to pop up

#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :bind (:map company-active-map
          ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))
#+end_src

** emmet-mode
emmet-mode is a plugin that improves HTML and CSS workflow

#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :config
  (add-to-list 'emmet-jsx-major-modes 'jsx-mode))

(map! :leader
      :desc "Toggle emmet mode"
      "e m" #'emmet-mode)
#+end_src

** hippie-expand
Since company-mode and emmet-mode conflict with each other, I use hippie-expand alongside
emmet-mode to make emmet-mode work as I wanted

#+begin_src emacs-lisp
(use-package hippie-exp
  :ensure nil
  :defer t
  :bind ("<C-return>" . hippie-expand)
  :config
  (setq-default hippie-expand-try-functions-list
                '(yas-hippie-try-expand emmet-expand-line)))
#+end_src

** lsp-mode
lsp-mode (Language Server Protocol) provides an IDE-like experience. Some of the
many features it includes are syntax highlighting, code completion, formatting,
and more

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))
#+end_src

** neotree
neotree displays the list of files in your current project, just like VS Code or
any IDE

| COMMAND      | DESCRIPTION                                     | KEYBINDING |
|--------------+-------------------------------------------------+------------|
| neotree/open | Displays neotree on the left side of the window | ~SPC o p~  |

#+begin_src emacs-lisp
(require 'neotree)
(with-eval-after-load 'doom-themes
  (doom-themes-neotree-config)
  (setq doom-themes-neotree-file-icons t)
 )
#+end_src

* ORG MODE
Org mode is a markdown mode for note-taking, writing journals, planning agendas,
etc. This is the main reason why I'm using Doom Emacs, and it has been an
enjoyable experience for me

https://orgmode.org/

** Basic Setup
Included in this setup are org-agenda and org-journal
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files '("~/Documents/notes/agenda.org")
      org-journal-dir "~/Documents/notes/journal/"
      org-journal-date-format "%A, %Y-%m-%d"
      org-journal-file-type 'monthly
      org-journal-file-format "%Y-%m.org"
      org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
      )
  ;; Needed to fix tabbing on headers
  (setq org-fold-core-style 'overlays)
)

#+end_src

** org-mode Ellipsis
The default dot-dot-dot ellipsis next to a header indicates hidden content below
the header. Use org-ellipsis to change the style of it

#+begin_src emacs-lisp
(setq org-ellipsis " ⤵")
#+end_src

Other interesting characters are ▼, ↴, ⬎, ⤷, and ⋱.

** org-roam
Org roam is an efficient way of note-taking. Creating a org file creates a node, and you can
link nodes together, forming a chain of relevant documents

#+begin_src emacs-lisp
(after! org
  (setq org-roam-directory "~/Documents/notes/"))
#+end_src

** org-roam-ui
#+attr_org: :width 600
[[./config-img/org-roam-ui.png]]

org-roam-ui is a beautiful frontend for your org-roam. It displays all of your connected
nodes in a network-like structure

#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

(map! :leader
      :desc "Toggle org-roam-ui-mode"
      "n r u" #'org-roam-ui-mode)
#+end_src

** org-auto-tangle
org-auto-tangle is used for taking block code inside org documents and
transferring them to other files. I mainly use this to write these config
documents

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** org-publish
org-publish is used for mass-exporting files. I use this to convert my private website's org
files to HTML. This specifically uses the ~org-html-publish-to-html~ function. To
export media files like ~png~ or ~gif~, then you would need to use the
~org-publish-attachment~ function

When trying to exclude directories for ~org-static~, the function would still
include the ~html/~ directory. Be sure to use regex to exclude that directory too

#+begin_src emacs-lisp
(setq org-publish-use-timestamps-flag nil)
(setq org-export-with-broken-links t)
(setq org-publish-project-alist
      '(("Life"
         :base-directory "~/Documents/notes/Life/"
         :base-extension "org"
         :publishing-directory "~/Documents/notes/Life/html"
         :recursive t
         :exclude "org-html-themes/.*"
         :publishing-function org-html-publish-to-html
         :auto-preamble t)
        ("org-static"
         :base-directory "~/Documents/notes/Life/"
         :base-extension "css\\|js\\|png\\|jpg\\|jpeg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/Documents/notes/Life/html/"
         :recursive t
         :exclude "org-html-themes/.*\\|html/"
         :publishing-function org-publish-attachment
    ))
)
#+end_src


* RAINBOW MODE
Rainbow mode displays the actual color for any hex value. The following enables
global rainbow mode (except org agenda since rainbow-mode destroys all
highlighting)

#+begin_src emacs-lisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(global-rainbow-mode 1 )
#+end_src

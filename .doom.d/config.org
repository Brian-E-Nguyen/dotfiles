#+title: Buraiyen's Doom Emacs Config
#+AUTHOR: Brian Nguyen (Buraiyen)
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t
#+STARTUP: showeverything

* TABLE OF CONTENTS :toc:
- [[#about-this-config--doom-emacs][ABOUT THIS CONFIG / DOOM EMACS]]
- [[#general-configs][GENERAL CONFIGS]]
  - [[#full-name--email][Full Name / Email]]
  - [[#general-keybindings][General Keybindings]]
  - [[#line-numbers][Line numbers]]
  - [[#open-specific-files][Open Specific Files]]
- [[#looks][LOOKS]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#window-size][Window Size]]
  - [[#window-transparency][Window Transparency]]
- [[#beacon][BEACON]]
- [[#dashboard][DASHBOARD]]
- [[#org-mode][ORG MODE]]
  - [[#agenda-and-journal][Agenda and Journal]]
  - [[#org-auto-tangle][Org Auto Tangle]]
- [[#neotree][NEOTREE]]
- [[#rainbow-mode][RAINBOW MODE]]

* ABOUT THIS CONFIG / DOOM EMACS
Doom Emacs is a configuration framework for GNU Emacs. It uses the "evil"
keybindings set to emulate Vim keybindings. Doom Emacs has various different
packages and customization for you to choose. Below is my custom configuration
of it, and feel free to use / modify whatever you like

[[https://github.com/doomemacs/][Link to Doom Emacs GitHub project]]

* GENERAL CONFIGS
** Full Name / Email

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. If you don't use any of these services, then
you don't have to fill out these fields

#+begin_src emacs-lisp
(setq user-full-name "Brian Nguyen"
      user-mail-address "brian.edison.nguyen@gmail.com")
#+end_src

** General Keybindings
In default Vim, navigating up and down around a word wrap would just jump to the first or last character. The bindings below makes it so that navigating though a word wrap would go through each line

As always, if you want to separate text bodies into different lines, you could use ~gq~

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
#+end_src

** Line numbers
Line numbers are currently set to relative. Using ~'nil~ removes line numbers

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

** Open Specific Files
These are keybindings to open files that I commonly use

| PATH TO FILE                            | DESCRIPTION            | KEYBINDING |
|-----------------------------------------+------------------------+------------|
| ~/Documents/dotfiles/.doom.d/config.org | /Edit doom config.org/ | ~SPC = c~  |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("=" . "open file")
       :desc "Edit doom config.org" "c" #'(lambda () (interactive) (find-file "~/Documents/dotfiles/.doom.d/config.org"))))
#+end_src

* LOOKS
** Font
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font' - your standard font
+ `doom-variable-pitch-font' - used for some Emacs applications
+ `doom-big-font' - used for `doom-big-font-mode'; use this for
  presentations or streaming.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMonoMedium Nerd Font Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15))
#+end_src

** Theme
Set the theme for Doom Emacs. The 'enable' commands seem to not work for me. Would need to find out why

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-one t))
#+end_src

** Window Size
The setting below sets Emacs to open maximized without it being fully
fullscreen. For some reason this works well on my main machine but not my
laptop. I'll have to look into it

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Window Transparency
The transparency is set to 90%. It looks great if you are using window blur with a compisitor

#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(90 90))
#+end_src


* BEACON
Very useful package for locating your cursor. Whenever you scroll, a flashing light flashes horizontally on your cursor

#+begin_src emacs-lisp
(beacon-mode 1)
(setq beacon-blink-when-point-moves-vertically 1)
(setq beacon-blink-when-buffer-changes t)
(setq beacon-blink-when-window-scrolls t)
#+end_src

* DASHBOARD
A customizable startup screen when launching Emacs.

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
(setq dashboard-banner-logo-title "Welcome to Doom Emacs!"
   dashboard-startup-banner "~/.doom.d/doom-emacs-dash.png"
   dashboard-set-heading-icons t
   dashboard-set-file-icons t
   dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 5)
                          (projects . 5)
                          (registers . 5)))
#+end_src

* ORG MODE
Org mode is a markdown mode for note-taking, writing journals, planning agendas,
etc. This is the main reason why I'm using Doom Emacs, and it has been an
enjoyable experience for me

https://orgmode.org/

** Agenda and Journal
Configs for my agenda and journal files. These setting are loaded after org is loaded so there wouldn't be any problems

#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/org/")
  (setq org-agenda-files '("~/Documents/journal/agenda.org"))
  (setq org-journal-dir "~/Documents/journal/"
      org-journal-file-header "#+TITLE: %M %Y"
      org-journal-date-format "%A, %Y-%m-%d"
      org-journal-file-type 'monthly
      org-journal-file-format "%Y-%m.org")
  ;; Needed to fix tabbing on headers
  (setq org-fold-core-style 'overlays)
)
#+end_src

Opens up a full graphical 12-month calendar with agendas listed
#+begin_src emacs-lisp
(global-set-key (kbd "C-c c") '=calendar)
#+end_src


** Org Auto Tangle
Org auto tangle is used for taking block code inside org documents and transferring them to other files. I mainly use this to write these config documents

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

* NEOTREE
Neotree displays the list of files in your current project, just like VS Code or any IDE

| COMMAND      | DESCRIPTION                                     | KEYBINDING |
|--------------+-------------------------------------------------+------------|
| neotree/open | Displays neotree on the left side of the window | ~SPC o p~  |

#+begin_src emacs-lisp
(require 'neotree)
#+end_src

* RAINBOW MODE
Rainbow mode displays the actual color for any hex value. The following enables
global rainbow mode (except org agenda since rainbow-mode destroys all
highlighting)

#+begin_src emacs-lisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(global-rainbow-mode 1 )
#+end_src

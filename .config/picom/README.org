#+title: Picom Config
#+AUTHOR: Brian Nguyen (Buraiyen)
#+PROPERTY: header-args :tangle picom.conf
#+auto_tangle: t
#+STARTUP: showeverything

* TABLE OF CONTENTS :TOC:
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#animations][ANIMATIONS]]
- [[#shadows][SHADOWS]]
  - [[#shadow-colors][Shadow Colors]]
  - [[#shadow-excludes][Shadow Excludes]]
- [[#fading][FADING]]
- [[#transparency--opacity][TRANSPARENCY / OPACITY]]
- [[#corner-radius][CORNER RADIUS]]
- [[#background-blurring][BACKGROUND BLURRING]]
- [[#general-settings][GENERAL SETTINGS]]

* ABOUT THIS CONFIG
A /compositor/ is a software that runs on the linux desktop. It's function is to provide aesthetics on
the displayed windows. Various styles that compositors include are

 * Transparency in windows
 * Transition animations
 * Drop shadows around windows which give them a 3D effect
 * V sync: Waits for the display to update before updating the display

/Picom/ is a fork of the original compositor called /compton/. I am using the /jonaburg/ fork of picom
to provide my windows with transparency blur

* ANIMATIONS
These animations require the jonaburg fork of picom found here:

https://github.com/jonaburg/picom

#+begin_src sh
transition-length = 150
transition-pow-x = 0.1
transition-pow-y = 0.1
transition-pow-w = 0.1
transition-pow-h = 0.1
size-transition = true
#+end_src

* SHADOWS
Enabled client-side shadows on windows. Note desktop windows
(windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
unless explicitly requested using the wintypes option.

Use the values ~true~ or ~false~ to toggle shadows
#+begin_src sh
shadow = false
# shadow = true;
#+end_src

The options below control the looks and positioning of the shadows
#+begin_src sh
# The blur radius for shadows, in pixels. (defaults to 12)
# shadow-radius = 12
shadow-radius = 50;

# The opacity of shadows. (0.0 - 1.0, defaults to 0.75)
shadow-opacity = 1

# The left offset for shadows, in pixels. (defaults to -15)
# shadow-offset-x = -15
shadow-offset-x = -50;

# The top offset for shadows, in pixels. (defaults to -15)
# shadow-offset-y = -15
shadow-offset-y = -30;
#+end_src

** Shadow Colors
If you wish to add colors to your shadows, then the settings below will let
you do that. I'm not using these, but I'm leaving them here if you wish to
do so
#+begin_src sh
# Red color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-red = 0

# Green color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-green = 0

# Blue color value o15 shadow (0.0 - 1.0, defaults to 0).
# shadow-blue = 0

# Hex string color value of shadow (#000000 - #FFFFFF, defaults to #000000). This option will override options set shadow-(red/green/blue)
# shadow-color = "#000000"
#+end_src

** Shadow Excludes
Specify a list of conditions of windows that should have no shadow. Use the ~xprop~ program to get
the specific name of a displayed application

Examples:
   ~shadow-exclude = "n:e:Notification";~

#+begin_src sh
# shadow-exclude = []
shadow-exclude = [
  "name = 'Notification'",
  "class_g = 'Conky'",
  "class_g ?= 'Notify-osd'",
  "class_g = 'Cairo-clock'",
  "_GTK_FRAME_EXTENTS@:c"
];
#+end_src

* FADING
Fade windows in/out when opening/closing and when opacity changes, unless no-fading-openclose is used.
#+begin_src sh
# fading = false
fading = true;

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
# fade-in-step = 0.028
fade-in-step = 0.5;

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
# fade-out-step = 0.03
fade-out-step = 0.2;
#+end_src

* TRANSPARENCY / OPACITY

#+begin_src sh
# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
# inactive-opacity = 1
inactive-opacity = 0.8;

# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
# frame-opacity = 1.0
frame-opacity = 0.7;

# Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
# inactive-opacity-override = true
inactive-opacity-override = false;

# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
# active-opacity = 1.0

# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
# inactive-dim = 0.0

# Specify a list of conditions of windows that should never be considered focused.
# focus-exclude = []
focus-exclude = [ "class_g = 'Cairo-clock'" ];
#+end_src

* CORNER RADIUS
Sets the radius of rounded window corners. When > 0, the compositor will
round the corners of windows.

#+begin_src sh
corner-radius = 7

# Exclude conditions for rounded corners.
rounded-corners-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'"
];

round-borders = 7;
#+end_src

* BACKGROUND BLURRING
#+begin_src sh
# Parameters for background blurring, see the *BLUR* section for more information.
blur:
{
  method = "dual_kawase";
  strength = 5;
}

# Specify the blur convolution kernel, with the following format:
# example:
#   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
#
# blur-kern = ""
blur-kern = "3x3box";


# Exclude conditions for background blur.
# blur-background-exclude = []
blur-background-exclude = [
  "window_type = 'dock'",
  "window_type = 'desktop'",
  "_GTK_FRAME_EXTENTS@:c"
];
#+end_src

* GENERAL SETTINGS

#+begin_src sh

# Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
# daemon = false

# Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
# `xrender` is the default one.
#
backend = "glx"
# backend = "xrender";

# Enable/disable VSync.
# vsync = false
vsync = true;

# Enable remote control via D-Bus. See the *D-BUS API* section below for more details.
# dbus = false

# Try to detect WM windows (a non-override-redirect window with no
# child that has 'WM_STATE') and mark them as active.
#
# mark-wmwin-focused = false
mark-wmwin-focused = true;

# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
# mark-ovredir-focused = false
mark-ovredir-focused = true;

# Try to detect windows with rounded corners and don't consider them
# shaped windows. The accuracy is not very high, unfortunately.
#
# detect-rounded-corners = false
detect-rounded-corners = true;

# Detect '_NET_WM_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_OPACITY' of client windows to frame windows.
#
# detect-client-opacity = false
detect-client-opacity = true;

# Specify refresh rate of the screen. If not specified or 0, picom will
# try detecting this with X RandR extension.
#
# refresh-rate = 60
refresh-rate = 0;

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
#
# detect-transient = false
detect-transient = true;

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
# group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if
# detect-transient is enabled, too.
#
# detect-client-leader = false
detect-client-leader = true;


# Disable the use of damage information.
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
# no-use-damage = false
use-damage = true;

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case doesn't matter.
# If using the "TRACE" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
#
# log-level = "debug"
log-level = "warn";


# Window type settings
#
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility",
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu",
#     "tooltip", "notification", "combo", and "dnd".
#
# Following per window-type options are available: ::
#
#   fade, shadow:::
#     Controls window-type-specific shadow and fade settings.
#
#   opacity:::
#     Controls default opacity of the window type.
#
#   focus:::
#     Controls whether the window of this type is to be always considered focused.
#     (By default, all window types except "normal" and "dialog" has this on.)
#
#   full-shadow:::
#     Controls whether shadow is drawn under the parts of the window that you
#     normally won't be able to see. Useful when the window has parts of it
#     transparent, and you want shadows in those areas.
#
#   clip-shadow-above:::
#     Controls wether shadows that would have been drawn above the window should
#     be clipped. Useful for dock windows that should have no shadow painted on top.
#
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection,
#     you can set this to `true`.
#
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; clip-shadow-above = true; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.8; }
  dropdown_menu = { opacity = 0.8; }
  normal = { blur-background = true; }
  splash = { blur-background = false; }
};
#+end_src

#+RESULTS:
